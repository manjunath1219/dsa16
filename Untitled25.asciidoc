+*In[ ]:*+
[source, ipython3]
----
<aside>
ðŸ’¡ **Question 1**

Given an array, for each element find the value of the nearest element to the right which is having a frequency greater than that of the current element. If there does not exist an answer for a position, then make the value â€˜-1â€™.

**Examples:**

Input: a[] = [1, 1, 2, 3, 4, 2, 1]
Output : [-1, -1, 1, 2, 2, 1, -1]

Explanation:
Given array a[] = [1, 1, 2, 3, 4, 2, 1]
Frequency of each element is: 3, 3, 2, 1, 1, 2, 3

Lets calls Next Greater Frequency element as NGF
1. For element a[0] = 1 which has a frequency = 3,
   As it has frequency of 3 and no other next element
   has frequency more than 3 so  '-1'
2. For element a[1] = 1 it will be -1 same logic
   like a[0]
3. For element a[2] = 2 which has frequency = 2,
   NGF element is 1 at position = 6  with frequency
   of 3 > 2
4. For element a[3] = 3 which has frequency = 1,
   NGF element is 2 at position = 5 with frequency
   of 2 > 1
5. For element a[4] = 4 which has frequency = 1,
   NGF element is 2 at position = 5 with frequency
   of 2 > 1
6. For element a[5] = 2 which has frequency = 2,
   NGF element is 1 at position = 6 with frequency
   of 3 > 2
7. For element a[6] = 1 there is no element to its
   right, hence -1
----


+*In[1]:*+
[source, ipython3]
----
def find_next_greater_frequency(arr):
    frequency = {}
    result = [-1] * len(arr)

    for num in arr:
        frequency[num] = frequency.get(num, 0) + 1

    for i in range(len(arr)):
        for j in range(i + 1, len(arr)):
            if frequency[arr[i]] < frequency[arr[j]]:
                result[i] = arr[j]
                break

    return result
arr = [1, 1, 2, 3, 4, 2, 1]
output = find_next_greater_frequency(arr)
print(output)
----


+*Out[1]:*+
----
[-1, -1, 1, 2, 2, 1, -1]
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
ðŸ’¡ **Question 2**

Given a stack of integers, sort it in ascending order using another temporary stack.

**Examples:**

Input : [34, 3, 31, 98, 92, 23]
Output : [3, 23, 31, 34, 92, 98]

Input : [3, 5, 1, 4, 2, 8]
Output : [1, 2, 3, 4, 5, 8]
----


+*In[2]:*+
[source, ipython3]
----
def sort_stack(stack):
    temp_stack = []

    while stack:
        temp = stack.pop()

        while temp_stack and temp_stack[-1] > temp:
            stack.append(temp_stack.pop())

        temp_stack.append(temp)

    return temp_stack
stack1 = [34, 3, 31, 98, 92, 23]
output1 = sort_stack(stack1)
print(output1)

stack2 = [3, 5, 1, 4, 2, 8]
output2 = sort_stack(stack2)
print(output2)
----


+*Out[2]:*+
----
[3, 23, 31, 34, 92, 98]
[1, 2, 3, 4, 5, 8]
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
<aside>
ðŸ’¡ **Question 3**

Given a stack withÂ **push()**,Â **pop()**, andÂ **empty()**Â operations, The task is to delete theÂ **middle**Â elementÂ ****of it without using any additional data structure.

Input Â :Â Stack[] = [1, 2, 3, 4, 5]

Output :Â Stack[] = [1, 2, 4, 5]

Input Â :Â Stack[] = [1, 2, 3, 4, 5, 6]

Output :Â Stack[] = [1, 2, 4, 5, 6]
----


+*In[3]:*+
[source, ipython3]
----
def delete_middle(stack, position):
    if position == 1:
        stack.pop()
        return

    temp = stack.pop()
    delete_middle(stack, position - 1)
    stack.append(temp)

def delete_middle_element(stack):
    size = len(stack)
    position = (size // 2) + 1 if size % 2 != 0 else size // 2
    delete_middle(stack, position)

# Testing the function
stack1 = [1, 2, 3, 4, 5]
delete_middle_element(stack1)
print(stack1) 

stack2 = [1, 2, 3, 4, 5, 6]
delete_middle_element(stack2)
print(stack2)
----


+*Out[3]:*+
----
[1, 2, 4, 5]
[1, 2, 3, 5, 6]
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
<aside>
ðŸ’¡ **Question 4**

Given a Queue consisting of firstÂ **n**Â natural numbers (in random order). The task is to check whether the given Queue elements can be arranged in increasing order in another Queue using a stack. The operation allowed are:

1. Push and pop elements from the stack
2. Pop (Or Dequeue) from the given Queue.
3. Push (Or Enqueue) in the another Queue.

**Examples :**

Input :Â Queue[] = { 5, 1, 2, 3, 4 }Â 

Output :Â YesÂ 

Pop the first element of the given Queue 

i.e 5.Â Push 5 into the stack.Â 

Now, pop all the elements of the given Queue and push them toÂ second Queue.Â 

Now, pop element 5 in the stack and push it to the second Queue.Â Â Â 

Input :Â Queue[] = { 5, 1, 2, 6, 3, 4 }Â 

Output :Â NoÂ 

Push 5 to stack.Â 

Pop 1, 2 from given Queue and push it to another Queue.Â 

Pop 6 from given Queue and push to stack.Â 

Pop 3, 4 from given Queue and push to second Queue.Â 

Now, from using any of above operation, we cannot push 5Â into the second Queue because it is below the 6 in the stack.

----


+*In[4]:*+
[source, ipython3]
----
def check_increasing_order(queue):
    stack = []
    second_queue = []
    expected = 1

    while queue:
        front = queue[0]

        if front == expected:
            second_queue.append(front)
            queue.pop(0)
            expected += 1
        elif stack and stack[-1] == expected:
            second_queue.append(stack.pop())
            expected += 1
        else:
            stack.append(front)
            queue.pop(0)

    while stack:
        if stack.pop() == expected:
            second_queue.append(expected)
            expected += 1
        else:
            return "No"

    return "Yes"

# Testing the function
queue1 = [5, 1, 2, 3, 4]
output1 = check_increasing_order(queue1)
print(output1) 

queue2 = [5, 1, 2, 6, 3, 4]
output2 = check_increasing_order(queue2)
print(output2) 
----


+*Out[4]:*+
----
Yes
No
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
ðŸ’¡ **Question 5**

Given a number , write a program to reverse this number using stack.

**Examples:**

Input : 365
Output : 563

Input : 6899
Output : 9986
----


+*In[5]:*+
[source, ipython3]
----
def reverse_number(number):
    number_str = str(number)
    stack = []

    for digit in number_str:
        stack.append(digit)

    reversed_str = ""

    while stack:
        reversed_str += stack.pop()

    reversed_number = int(reversed_str)

    return reversed_number

# Testing the function
number1 = 365
output1 = reverse_number(number1)
print(output1) 

number2 = 6899
output2 = reverse_number(number2)
print(output2) 
----


+*Out[5]:*+
----
563
9986
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
<aside>
ðŸ’¡ **Question 6**

Given an integer k and aÂ **[queue](https://www.geeksforgeeks.org/queue-data-structure/)**Â of integers, The task is to reverse the order of the firstÂ **k**Â elements of the queue, leaving the other elements in the same relative order.

Only following standard operations are allowed on queue.

- **enqueue(x) :**Â Add an item x to rear of queue
- **dequeue() :**Â Remove an item from front of queue
- **size() :**Â Returns number of elements in queue.
- **front() :**Â Finds front item.

----


+*In[6]:*+
[source, ipython3]
----
from queue import Queue

def reverse_k_elements(queue, k):
    if queue.empty() or k <= 0 or k > queue.qsize():
        return

    stack = []
    temp_queue = Queue()

    # Dequeue the first k elements and push them onto the stack
    for _ in range(k):
        element = queue.get()
        stack.append(element)

    # Enqueue the remaining elements into the temporary queue
    while not queue.empty():
        temp_queue.put(queue.get())

    # Enqueue the elements from the stack back into the original queue
    while stack:
        queue.put(stack.pop())

    # Enqueue the elements from the temporary queue back into the original queue
    while not temp_queue.empty():
        queue.put(temp_queue.get())

# Testing the function
queue = Queue()
queue.put(1)
queue.put(2)
queue.put(3)
queue.put(4)
queue.put(5)

k = 3
reverse_k_elements(queue, k)

# Printing the modified queue
while not queue.empty():
    print(queue.get())
----


+*Out[6]:*+
----
3
2
1
4
5
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
<aside>
ðŸ’¡ **Question 7**

Given a sequence of n strings, the task is to check if any two similar words come together and then destroy each other then print the number of words left in the sequence after this pairwise destruction.

**Examples:**

InputÂ : ab aa aa bcd ab

OutputÂ : 3

*As aa, aa destroys each other so,*

*ab bcd ab is the new sequence.*

Input : Â tom jerry jerry tom

Output :Â 0

*As first both jerry will destroy each other.*

*Then sequence will be tom, tom they will also destroy*

*each other. So, the final sequence doesnâ€™t contain any*

*word.*

----


+*In[7]:*+
[source, ipython3]
----
def count_words_left(sequence):
    words = sequence.split()
    stack = []

    for word in words:
        if not stack or word != stack[-1]:
            stack.append(word)
        else:
            stack.pop()

    return len(stack)

# Testing the function
sequence1 = "ab aa aa bcd ab"
output1 = count_words_left(sequence1)
print(output1)  

sequence2 = "tom jerry jerry tom"
output2 = count_words_left(sequence2)
print(output2)  
----


+*Out[7]:*+
----
3
0
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
ðŸ’¡ **Question 8**

Given an array of integers, the task is to find the maximum absolute difference between the nearest left and the right smaller element of every element in the array.

**Note:**Â If there is no smaller element on right side or left side of any element then we take zero as the smaller element. For example for the leftmost element, the nearest smaller element on the left side is considered as 0. Similarly, for rightmost elements, the smaller element on the right side is considered as 0.

**Examples:**

Input : arr[] = {2, 1, 8}
Output : 1
Left smaller  LS[] {0, 0, 1}
Right smaller RS[] {1, 0, 0}
Maximum Diff of abs(LS[i] - RS[i]) = 1

Input  : arr[] = {2, 4, 8, 7, 7, 9, 3}
Output : 4
Left smaller   LS[] = {0, 2, 4, 4, 4, 7, 2}
Right smaller  RS[] = {0, 3, 7, 3, 3, 3, 0}
Maximum Diff of abs(LS[i] - RS[i]) = 7 - 3 = 4

Input : arr[] = {5, 1, 9, 2, 5, 1, 7}
Output : 1
----


+*In[8]:*+
[source, ipython3]
----
def find_max_abs_difference(arr):
    n = len(arr)
    LS = [0] * n
    RS = [0] * n
    stack = []

    # Find the nearest smaller element on the left (LS)
    for i in range(n):
        while stack and arr[stack[-1]] >= arr[i]:
            stack.pop()
        if stack:
            LS[i] = arr[stack[-1]]
        stack.append(i)

    # Clear the stack
    stack.clear()

    # Find the nearest smaller element on the right (RS)
    for i in range(n - 1, -1, -1):
        while stack and arr[stack[-1]] >= arr[i]:
            stack.pop()
        if stack:
            RS[i] = arr[stack[-1]]
        stack.append(i)

    max_diff = 0

    # Compute the maximum absolute difference
    for i in range(n):
        diff = abs(LS[i] - RS[i])
        max_diff = max(max_diff, diff)

    return max_diff

# Testing the function
arr1 = [2, 1, 8]
output1 = find_max_abs_difference(arr1)
print(output1)  

arr2 = [2, 4, 8, 7, 7, 9, 3]
output2 = find_max_abs_difference(arr2)
print(output2)  

arr3 = [5, 1, 9, 2, 5, 1, 7]
output3 = find_max_abs_difference(arr3)
print(output3)
----


+*Out[8]:*+
----
1
4
1
----


+*In[ ]:*+
[source, ipython3]
----

----
